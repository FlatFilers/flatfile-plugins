name: Test
on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

concurrency:
  group: '${{ github.workflow }} @ ${{ github.event.pull_request.head.label || github.head_ref || github.ref }}'
  cancel-in-progress: true

jobs:
  determine-packages:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4
      - name: Get package names and create shards
        id: set-matrix
        run: |
          SEARCH_DIRS="plugins utils validate convert enrich import export"

          PACKAGES=$(
            for dir in $SEARCH_DIRS; do
              if [ -d "$dir" ]; then
                find "$dir" -maxdepth 2 -name "package.json" -exec sh -c '
                  PACKAGE_NAME=$(jq -r .name {})
                  if [ "$PACKAGE_NAME" != "null" ]; then
                    echo "$PACKAGE_NAME"
                  fi
                ' \;
              fi
            done | sort
          )

          # Create 4 shards
          SHARD1=$(echo "$PACKAGES" | sed -n '1~4p' | jq -R -s -c 'split("\n")[:-1]')
          SHARD2=$(echo "$PACKAGES" | sed -n '2~4p' | jq -R -s -c 'split("\n")[:-1]')
          SHARD3=$(echo "$PACKAGES" | sed -n '3~4p' | jq -R -s -c 'split("\n")[:-1]')
          SHARD4=$(echo "$PACKAGES" | sed -n '4~4p' | jq -R -s -c 'split("\n")[:-1]')

          MATRIX=$(jq -n \
                    --argjson shard1 "$SHARD1" \
                    --argjson shard2 "$SHARD2" \
                    --argjson shard3 "$SHARD3" \
                    --argjson shard4 "$SHARD4" \
                    '{
                      "include": [
                        {"shard": 1, "packages": $shard1},
                        {"shard": 2, "packages": $shard2},
                        {"shard": 3, "packages": $shard3},
                        {"shard": 4, "packages": $shard4}
                      ]
                    }')

          # Base64 encode the matrix to avoid issues with special characters
          MATRIX_BASE64=$(echo "$MATRIX" | base64 -w 0)
          echo "matrix=$MATRIX_BASE64" >> $GITHUB_OUTPUT
          echo "Created matrix (base64 encoded): $MATRIX_BASE64"

  test:
    needs: determine-packages
    name: Test Shard ${{ matrix.shard }}
    runs-on: ubuntu-latest
    if: ${{ github.head_ref != 'changeset-release/main' }}
    strategy:
      matrix: ${{ fromJson(fromBase64(needs.determine-packages.outputs.matrix)) }}
      fail-fast: false
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Setup Node.js environment
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build
        run: npx turbo run build

      - name: Test
        run: npx turbo run test --filter=${{ join(matrix.packages, ' --filter=') }}
